<?php
/**
 * Implements hook_menu().
 */
function ideal_challenge_menu() {
  $items = array();
  $items['admin/config/user-interface/openideal/ideal-challenge'] = array(
    'title' => 'Default Challenge',
    'access arguments' => array('access content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ideal_challenge_default_challenge_form'),
    'file' => 'ideal_challenge.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme()
 */

function ideal_challenge_theme($existing, $type, $theme, $path) {
  return array(
    'ideal_challenge_add_idea' => array(
      'variables' => array(),
    ),

    'challenge_node_form' => array(
      'render element' => 'form',
      'template' => 'challenge-node-form',
      // this will set to module/theme path by default:
      'path' => drupal_get_path('module', 'ideal_challenge'),
    ),
    
  ); 
}
/**
* Implements hook_form_alter
* Created by Equal-Ist Project
*/
function ideal_challenge_form_alter(&$form, &$form_state, $form_id) {
	dsm($form);
  if ($form_id == 'challenge_node_form') {


    //$form['field_challenge_image']['und']['#file_upload_title'] = 'Image <br> <br> Please upload an image by using Drag & Drop or choose one from the file browser, characterising the challenge. ';
	$form['field_challenge_image']['und'][0]['#title'] = 'Image <br> <br> Please upload an image by using Drag & Drop or choose one from the file browser, characterising the challenge. ';
    //$form['field_attachements']['und']['#file_upload_title'] = 'Attachments <br> <br> You can upload files with further information about the idea.';
	$form['field_attachements']['und'][0]['#title'] = 'Attachments <br> <br> You can upload files with further information about the idea.';
      $path = drupal_get_path('module', 'ideal_challenge');
      
    //changing value of submit 
    $form['actions']['submit']['#value']='Submit the challenge';
    //changing value of delete
    $form['actions']['delete']['#value']='Delete the challenge';
    
    
    $path = drupal_get_path('module', 'ideal_challenge');
      drupal_add_js($path . '/js/ideal_challenge.js');
      drupal_add_css($path . '/css/ideal_challenge.css');
     $current_nid =0;
      if ($node = menu_get_object()) {
        $current_nid = $node->nid;
      }

      //BEGIN: Get Challenges and display for related Challenges Block

      $challenge_options = array();
      $challenge_header = array(
        'challenge' => array('data' => t('Challenge'), 'field' => 'n.challenge')
      );
      $nodes = node_load_multiple(array(), array('type' => 'challenge'));

      foreach ($nodes as $node) {
        if($node->nid != $current_nid){
          
          $challenge_options[$node->nid] = array(
            'challenge' => array(
              'data' => array(
                 '#type' => 'link',
                 '#title' => $node->title,
                  '#href' => 'node/' . $node->nid,
               )
             ),
          
          );
        } 
      }
      if ($_GET['sort']=='desc') {
        $order='desc';
      } else {
        $order='asc';
      }

      // Sorting $challenge_options for displaying in tableselect
      if (module_exists('equal_ist_phases')) {
        //Sortfunction declared in equal_ist_phases module!
        $challenge_options_sort=sortmulti($challenge_options, 'challenge', $order, TRUE);
      }else{
        //If Module does not exist, use this sorting
        $challenge_options_sort=array();
        if(is_array($challenge_options) && count($challenge_options)>0) {
           foreach(array_keys($challenge_options) as $key) { 
              $temp[$key]=$challenge_options[$key]['challenge']['data']['#title'];
           }
           
           if ($order=='asc') {
               asort($temp);
           } else {    
               arsort($temp);
           }
           
           foreach(array_keys($temp) as $key) { 
                 $challenge_options_sort[$key]=$challenge_options[$key];
           }
        }
        
      }
      
      //Build the tableselect.
      $form['tableselect_challenge'] = array(
          '#type' => 'tableselect',
          '#header' => $challenge_header,
          '#options' => $challenge_options_sort,
          '#empty' => t('No content available.'),
        );
      //Get the Data from field field_related_ideas and print them in challenge_nodes and tag_nodes
      foreach ($form['field_related_challenges']['und']['#default_value'] as $value) {
        $form['tableselect_challenge']['#default_value'][$value]=$value;  
      } 
      $form['field_related_challenges']['#access']=FALSE;
      $form['#attached']['js'][]=array(
        'type' => 'file',
        'data' => drupal_get_path('theme',$GLOBALS['theme']).'/js/equal-ist-idea-form.js',
        );
      //END of related CHallenge Block

      // Set default dates for Phase module !
      /*
      $test=date('d/m/y',strtotime('+30 days'));
      dsm($test);
      $form['field_phase1_end']['und'][0]['#default_value']=$test;
      $form['field_phase1_end']['und'][0]['#date_is_default']=TRUE;
      dsm($form);
      */
  }
}

/**
 * Preprocessor for theme('challenge_node_form').
 * Altered by EQUAL-IST Project
 */
function template_preprocess_challenge_node_form(&$variables) {

  // nodeformcols is an alternative for this solution.
  if (!module_exists('nodeformcols')) {
    $variables['sidebar'] = array();   // Put taxonomy fields in sidebar.
    $variables['sidebar'][] = $variables['form']['field_challenge_image'];
    $variables['sidebar'][] = $variables['form']['field_attachements'];

    hide($variables['form']['field_challenge_image']);
    hide($variables['form']['field_copyright_infringement']);
    hide($variables['form']['field_attachements']);

    $variables['field_copyright_infringement']=$variables['form']['field_copyright_infringement'];
    hide($variables['form']['field_copyright_infringement']);

    $variables['field_categories_subcategories']=$variables['form']['field_categories_subcategories'];
    hide($variables['form']['field_categories_subcategories']);

    $variables['field_links_external']=$variables['form']['field_links_external'];
    hide($variables['form']['field_links_external']);
    
    if(isset($variables['form']['anonymous_publishing'])){
      $variables['anonymous_publishing']=$variables['form']['anonymous_publishing'];
      hide($variables['form']['anonymous_publishing']);
    }
    if(isset($variables['form']['tableselect_challenge'])){
      $variables['tableselect_challenge']=$variables['form']['tableselect_challenge'];
      hide($variables['form']['tableselect_challenge']);
    }
    $variables['field_challenges_similar']=$variables['form']['field_challenges_similar'];
    hide($variables['form']['field_challenges_similar']);
    $variables['additional_settings']=$variables['form']['additional_settings'];
    hide($variables['form']['additional_settings']);
    // Extract the form buttons, and put them in independent variable.
    $variables['buttons'] = $variables['form']['actions'];
    hide($variables['form']['actions']);
    hide($variables['form']['field_related_challenges']);
  }
}

/**
  * Implements hook_node_presave() 
  * Assign $node->tableselect_challenge  to $node->field_related_challenges
  */
function ideal_challenge_node_presave($node) {
  if($node->type=='challenge'){
    if (!empty($node->tableselect_challenge)){
      $node->field_related_challenges['und']=array();
    }
    foreach ($node->tableselect_challenge as $nid) {
      $target=array('target_id' => $nid);
      $node->field_related_challenges['und'][]=$target;
    }
  }  
}


/**
* NEXT FUNCTIONS contain Open Ideal blocks that are not used anymore by Crowdequality !
*
*/

/**
 * Implements hook_block_info().
 */
function ideal_challenge_block_info() {
  $blocks = array();
  $blocks['challenge_add_idea'] = array(
    'info' => t('ideal challenge add idea'),
  );
  $blocks['challenge_data'] = array(
		'info' => t('Challenge Data Block'),
	);
  $blocks['challenge_add_idea_button'] = array(
    'info' => t('Challenge add idea button'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ideal_challenge_block_view($delta) {
  switch ($delta) {
    case 'challenge_add_idea':
      $block = array(
        'subject' => t('The Challenge'),
        'content' => theme('ideal_challenge_add_idea'),
      );
      break;
    case 'challenge_data':
      $block = array(
        'subject' => t('Time left'),
        'content' => _ideal_challenge_progress(),
      );
      break;
    case 'challenge_add_idea_button':
      $block = array(
        'content' => _ideal_challenge_add_idea_button(),
      );
      break;
  }
  return $block;
}

/*
* Implements hook_views_pre_render().
*/
function ideal_challenge_views_pre_render(&$view) {
  //add js for slider arrows if challenge slider
  if($view->name == 'default_challenge'){
    drupal_add_js('(function($) { Drupal.behaviors.challengeslidearrows = { attach: function(context) {$(".carousel-control.left").click(function(e){ e.preventDefault(); var carousel_id = $(this).attr("href"); $(carousel_id).carousel("prev"); }); $(".carousel-control.right").click(function(e){ e.preventDefault(); var carousel_id = $(this).attr("href"); $(carousel_id).carousel("next"); }); if($(".view-default-challenge .carousel-inner .item").length <= 1){ $(".view-default-challenge").find(".carousel-indicators, .carousel-control").hide();  } } } })(jQuery);', 'inline');
  }
}

function theme_ideal_challenge_add_idea() {
  $output = '';
   // Get the nid (for reference) from the default challenge.
  $challenge_nid = variable_get('default_challenge', NULL);

  if (!empty($challenge_nid)) {
    $challenge = views_embed_view('default_challenge', 'block', $challenge_nid);
    $form = drupal_get_form('ideal_challenge_add_idea_form');
    $output .= $challenge;
    $output .= render($form);
  }
  return $output;
}

/**
 * Generate a block containing a node entry form.
 */
function ideal_challenge_add_idea_form() {
  $form = array();

  $form['header'] = array(
    '#markup' => '<h4 class="ideal-challenge-add-idea">' . t('Be bold! Add your idea:') . '</h4>',
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => '',
    '#default_value' => '',
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#description' => '',
    '#default_value' => '',
    '#required' => TRUE
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Share')
  );
  return $form;
}

/**
 * Additional submit handler for the node add form.
 */
function ideal_challenge_add_idea_form_submit($form, &$form_state) {
  global $user;
  global $language;
  $lang = module_exists('local') ? $language : LANGUAGE_NONE;

  // Get the nid (for reference) anf the terms from the default challenge.
  $challenge_nid = variable_get('default_challenge', NULL);
  $challenge = node_load($challenge_nid);
  $obj = entity_metadata_wrapper('node', $challenge);
  $category = $obj->field_category->value();

//  $wrp = entity_property_values_create_entity('node');
//  $wrp->save();

  // Building the idea node fro, the title and body from th form,
  // and the challenge reference and category from the default challenge.
  $node = new stdClass();
  $node->language = $lang;
  $node->uid = $user->uid;
  $node->type = 'idea';
  $node->title = $form_state['values']['title'];
  $node->body[$node->language][]['value'] = $form_state['values']['body'];
  $node->field_category[$node->language][]['tid'] = $category->tid;
  $node->field_challenge_ref[$node->language][]['target_id'] = $challenge_nid;

  // Saving the node,
  node_object_prepare($node);
  $node = node_submit($node);
  node_save($node);

  drupal_set_message('Your idea was saved');
}

/**
 * Calculate progress of challenge.
 */
function _ideal_challenge_progress() {
	$entity = menu_get_object();
	if ($entity) {
		$node = entity_metadata_wrapper('node', $entity);
		$startdate = $node->field_dates->value->value();
		$enddate = $node->field_dates->value2->value();
		$start = new DateTime(date('c'));
		$end = new DateTime(date('c', $enddate));
    // Time difference from now to end date.
		$diffnow = $start->diff($end);
    // Time difference from start date to end date.
		$diff = abs($enddate - $startdate);
    // Time difference from now to start date.
		$diffpassed = abs(time() - $startdate);
		if ($enddate > time()) {
      // Create HTML for time left counter on challenge.
      // Show year and months only if larger than 0.
			$yearshtml = '';
			if ($diffnow->y > 0) {
				$yearshtml = '<div class="col-xs-4" ><span class="badge" ><h2 class="challenge-date-value">' . $diffnow->y . '</h2>&nbsp;<small class="challenge-date-label small">' . format_plural($diffnow->y, 'Year', 'Years') . '</small></span></div>';
			}
			$monthshtml = '';
			if ($diffnow->y > 0 || $diffnow->m > 0) {
				$monthshtml = '<div class="col-xs-4" ><span class="badge" ><h2 class="challenge-date-value">' . $diffnow->m . '</h2>&nbsp;<small class="challenge-date-label">' . format_plural($diffnow->m, 'Month', 'Months') . '</small></span></div>';
			}
			$dayshtml = '<div class="col-xs-4" ><span class="badge" ><h2 class="challenge-date-value">' . $diffnow->d . '</h2>&nbsp;<small class="challenge-date-label">' . format_plural($diffnow->d, 'Day', 'Days') . '</small></span></div>';
			// If the year is not displayed, display hours.
      $hourshtml = '';
			if ($diffnow->y == 0) {
				$hourshtml = '<div class="col-xs-4" ><span class="badge" ><h2 class="challenge-date-value">' . $diffnow->h . '</h2>&nbsp;<small class="challenge-date-label">' . format_plural($diffnow->h, 'Hour', 'Hours') . '</small></span></div>';
			}
      // If the month is not displayed, display minutes.
			$minuteshtml = '';
			if ($diffnow->y == 0 && $diffnow->m == 0) {
				$minuteshtml = '<div class="col-xs-4" ><span class="badge" ><h2 class="challenge-date-value">' . $diffnow->i . '</h2>&nbsp;<small class="challenge-date-label ">' . format_plural($diffnow->s, 'Min', 'Mins') . '</small></span></div>';
			}
      // Calculate percentage of time passed.
			$complete = round(($diffpassed / $diff) * 100);
      // Output progress bar of time passed and time counter.
			// Progressbar removed:
      // <h4>'. t('Challenge is @complete% completed', array('@complete' => $complete)) . '</h4>
      // <div class="progress"><div class="bar" style="width:' . $complete . '%;"></div></div>
			$output = array(
				'#type' => 'markup',
				'#markup' => '
				<div id="challenge-dates" class="row" >' . $yearshtml . $monthshtml . $dayshtml . $hourshtml . $minuteshtml . '</div>
        <div id="challenge-dates-start-end"><strong>' . t('Start') . '</strong>- ' . format_date($startdate, 'custom', 'n.j.Y') . '<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'. t('End') . '</strong>- ' . format_date($enddate, 'custom', 'n.j.Y') . '</div>
				',
			);
		}
		else {
      // If end date of challenge is in the past, the challenge is completed.
			$output = array(
				'#type' => 'markup',
				'#markup' => '<div class="well">' . t('The challenge is completed.') .'</div>',
			);
		}
		return $output;
	}
}

/**
 * Output a button to add an idea.
 */
function _ideal_challenge_add_idea_button() {
  $node = menu_get_object();
  if ($node) {
    $nid = $node->nid;
    $output = '<div class="challenge-add-idea-button">';
    $output .= l('Add idea', 'node/add/idea', array('attributes' => array('class' => 'btn btn-success'), 'query' => array('field_challenge_ref' => $nid)));
    $output .= '</div>';
		return $output;
	}
}
