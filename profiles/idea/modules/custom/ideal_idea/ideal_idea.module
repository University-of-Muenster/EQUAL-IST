<?php

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function ideal_idea_form_alter(&$form, &$form_state, $form_id) {
	//importing the form language
	$lang = $form['language']['#value'];
	if ($form_id == 'idea_node_form') {
    //Important for Phase module
    $node = $form_state['node'];
    if (!isset($node->nid) || isset($node->is_new)) {
      $form['field_active'][$lang]['#default_value']=1;
    }

    $path = drupal_get_path('module', 'ideal_idea');
    drupal_add_js($path . '/js/ideal_idea.js');
    drupal_add_css($path . '/css/ideal_idea.css');
    
    //add placeholders on fields
    $form['title']['#attributes']['placeholder'] = $form['title']['#title'];

	
	
    $form['body'][$lang][0]['#attributes']['placeholder'] = $form['body'][$lang][0]['#title'];
    $form['field_category'][$lang]['#options']['_none'] = $form['field_category'][$lang]['#title'];

    //change submit button
    $form['actions']['submit']['#value'] = ('Submit your Idea');
    $form['actions']['submit']['#attributes'] = array('class' => array('submit-idea'));
	
	//changing label for delete button
	$form['actions']['delete']['#value']='Delete the idea';
	
    //add back button
    $form['actions']['cancel'] = array(
      '#type' => 'button',
      '#access' => TRUE,
      '#value' =>('Abort the Idea'),
      '#weight' => 5,
      '#attributes' => array('class' => array('go-back'), 'onClick' => 'history.go(-1);'),
    );
    //upload fields text
    //for images
    $form['field_idea_image'][$lang]['#file_upload_title'] = '';
    $form['field_idea_image'][$lang][0]['#title'] = 'Image <br> <br> Please upload an image by using Drag & Drop or choose one from the file browser, characterising the idea. ';
    $form['field_idea_image'][$lang]['#file_upload_description'] = '';
    //for documents
    $form['field_attachments'][$lang]['#file_upload_title'] = '';
    $form['field_attachments'][$lang][0]['#title'] = 'Attachments <br> <br> You can upload files with further information about the idea.';
    $form['field_attachments'][$lang]['#file_upload_description'] = '';
    
    
    //BEGIN
    //Show all existing Ideas for related Ideas block

    // Get the current node ID (if we edit a node)
    $current_nid =0;
    if ($node = menu_get_object()) {
      $current_nid = $node->nid;
    }

    $challenge_options = array();
    $challenge_header = array(
      'challenge' => array('data' => t('Challenge'), 'field' => 'n.challenge'),
      'title' => array('data' => t('Idea title'), 'field' => 'n.title')
    );

    $nodes = node_load_multiple(array(), array('type' => 'idea'));

    foreach ($nodes as $node) {
      if($node->nid != $current_nid){
        $challenge=node_load($node->field_challenge_ref[$lang][0]['target_id']);
        $challenge_options[$node->nid] = array(
          'challenge' => array(
            'data' => array(
               '#type' => 'link',
               '#title' => $challenge->title,
                '#href' => 'node/' . $challenge->nid,
             )
           ),
          'title' => array(
           'data' => array(
             '#type' => 'link',
             '#title' => $node->title,
             '#href' => 'node/' . $node->nid,
            
            ),
          )
        
        );
      } 
    }
    //Parameter for Sortfunction
    if ($_GET['sort']=='desc') {
      if($_GET['order']=='Idea title' || $_GET['order']=='Challenge') {
        $challenge_order='desc';
      }else{
        $tag_order='desc';
      }
    }else {
      if($_GET['order']=='Idea title' || $_GET['order']=='Challenge') {
        $challenge_order='asc';
      }else{
        $tag_order='asc';
      }
    }
    if ($_GET['order']=='Idea title'){
      $challenge_index='title';
    }elseif($_GET['order']=='Challenge'){
      $challenge_index='challenge';
    }
    
    
    // Sorting $challenge_options for displaying in tableselect
    if (module_exists('equal_ist_phases')) {
      //Sortfunction declared in equal_ist_phases module!
      $challenge_options_sort=sortmulti($challenge_options, $challenge_index, $challenge_order, TRUE);
    }else{
      //If Module does not exist, use this sorting
      $challenge_options_sort=array();
      if(is_array($challenge_options) && count($challenge_options)>0) {
         foreach(array_keys($challenge_options) as $key) { 
            $temp[$key]=$challenge_options[$key][$challenge_index]['data']['#title'];
         }
         
         if ($challenge_order=='asc') {
             asort($temp);
         } else {    
             arsort($temp);
         }
         
         foreach(array_keys($temp) as $key) { 
               $challenge_options_sort[$key]=$challenge_options[$key];
         }
      }
      
    }
    //Build the tableselect.
    $form['challenge_nodes'] = array(
        '#type' => 'tableselect',
        '#header' => $challenge_header,
        '#options' => $challenge_options_sort,
        '#empty' => t('No content available.'),
      );

    //SHOW Ideas by Tags
    $tax_tree=taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('idea_tags')->vid);
    
    $parent=array();
    $child=array();
    $tagged_nodes=array();
    //Works only if index in right order
    foreach ($tax_tree as $tax) {
      if($tax->parents[0]=='0'){
        $temp_parent=$tax;
      }else{
        $temp_nodes=node_load_multiple(taxonomy_select_nodes($tax->tid));
        if(!empty($temp_nodes)){
          if(!(count($temp_nodes)==1 && $temp_nodes[0]->nid==$current_nid)){
            $temp_child=$tax;
            foreach ($temp_nodes as $node) {
             if ($node->nid !=$current_nid){
              $parent[]=clone $temp_parent;
              $child[]=clone $temp_child;
              $tagged_nodes[]=clone $node;
             }
            }
          }
          
        }
        
      }
    }
    
    $tag_options = array();
    $tag_header = array(
      'tag_parent' => t('Tag'),
      'tag_child' => t('Subtag'),
      'title' => t('Idea title')
    );
    $tag_temp_name='';
    $subtag_temp_name='';
    $string_index='';
    $index_translate=array();
    foreach ($tagged_nodes as $key => $node) {
      
      if($tag_temp_name==$parent[$key]->name){
        $tag_name='';
      }else{
        $tag_name=$parent[$key]->name;
      }
      if($subtag_temp_name==$child[$key]->name){
        $subtag_name='';
      }else{
        $subtag_name=$child[$key]->name;
      }
      
      if(array_key_exists((string)$node->nid, $tag_options)){
        $string_index.='-'.(string)$node->nid;
      }else{
        $string_index=(string)$node->nid;
      }
      $index_translate[$node->nid][$string_index]=$string_index;
      $tag_options[$string_index] = array(
        'tag_parent' => t($tag_name),
        'tag_child' => t($subtag_name),
        'title' => array(
          'data' => array(
            '#type' => 'link',
            '#title' => $node->title,
            '#href' => 'node/' . $node->nid,
            
          ),
        )
        
      );
      
      $tag_temp_name=$parent[$key]->name;
      $subtag_temp_name=$child[$key]->name; 
       
    }
    $form['tag_nodes'] = array(
        '#type' => 'tableselect',
        '#header' => $tag_header,
        '#options' => $tag_options,
        '#empty' => t('No content available.'),
      );
    $form['#attached']['js'][]=array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'ideal_idea').'/js/equal-ist-idea-form.js',
      );
    //Get the Data from field field_related_ideas and print them in challenge_nodes and tag_nodes
    foreach ($form['field_related_ideas'][$lang]['#default_value'] as $value) {

      $form['challenge_nodes']['#default_value'][$value]=$value;
      foreach ($index_translate[$value] as $string_id) {
        $form['tag_nodes']['#default_value'][$string_id]=$string_id;
      }
      
    } 

  } 

}


/**
 * Implements hook_theme().
 */
function ideal_idea_theme($existing, $type, $theme, $path) {
  return array(
    'idea_node_form' => array(
      'render element' => 'form',
      'template' => 'idea-node-form',
      // this will set to module/theme path by default:
      'path' => drupal_get_path('module', 'ideal_idea'),
    ),
    
  );
}


/**
 * Preprocessor for theme('idea_node_form').
 */
function template_preprocess_idea_node_form(&$variables) {
  // nodeformcols is an alternative for this solution.
  if (!module_exists('nodeformcols')) {
    $variables['sidebar'] = array();   // Put taxonomy fields in sidebar.
    $variables['sidebar'][] = $variables['form']['field_idea_image'];
    $variables['sidebar'][] = $variables['form']['field_attachments'];
    hide($variables['form']['field_copyright_infringement']);
    hide($variables['form']['field_idea_image']);
    hide($variables['form']['field_attachments']);

    $variables['field_copyright_infringement']=$variables['form']['field_copyright_infringement'];
    hide($variables['form']['field_copyright_infringement']);

    // Anonymous Publishing put seperate
    if(isset($variables['form']['anonymous_publishing'])){
      $variables['anonymous_publishing']=$variables['form']['anonymous_publishing'];
      hide($variables['form']['anonymous_publishing']);
    }
    if(isset($variables['form']['tag_nodes'])&&isset($variables['form']['challenge_nodes'])){
      $variables['related_nodes']['tag_nodes']=$variables['form']['tag_nodes'];
      hide($variables['form']['tag_nodes']);
      $variables['related_nodes']['challenge_nodes']=$variables['form']['challenge_nodes'];
      hide($variables['form']['challenge_nodes']);
    }
    $variables['additional_settings']=$variables['form']['additional_settings'];
    hide($variables['form']['additional_settings']);
    
    if(isset($variables['form']['field_related_ideas'])){
      hide($variables['form']['field_related_ideas']);
    }

    $variables['field_ideas_similar']=$variables['form']['field_ideas_similar'];
    hide($variables['form']['field_ideas_similar']);

    $variables['field_tags_for_related_challenge']=$variables['form']['field_tags_for_related_challenge'];
    hide($variables['form']['field_tags_for_related_challenge']);

    $variables['field_external_links']=$variables['form']['field_external_links'];
    hide($variables['form']['field_external_links']);
    
    // Extract the form buttons, and put them in independent variable.
    $variables['buttons'] = $variables['form']['actions'];
    hide($variables['form']['actions']);
  }
}



/**
  * Implements hook_node_presave() 
  * Assign $node->tag_nodes and $node->challenge_nodes to $node->field_related_ideas
  */
function ideal_idea_node_presave($node) {
	//$language take it from the field and parse in into the $form
	$lang= $node->language;
if($node->type=='idea'){
  $nids=array();
  foreach ($node->challenge_nodes as $cnid) {
    if($cnid!=0){
      $nids[]=$cnid;
    }
  }
  foreach ($node->tag_nodes as $cnid) {
    $parsearray=explode("-", $cnid);
    $pnid=intval(end($parsearray));
    if($pnid!=0){
      $nids[]=$pnid;
    }
  }
  $nids=array_unique($nids);
  if (!empty($nids)){
    $node->field_related_ideas[$lang]=array();
  }
  foreach($nids as $nid){
    $target=array( 'target_id' => $nid);
    $node->field_related_ideas[$lang][]=$target;
  }
}

}
/**
 * Implements hook_block_info().
 */
function ideal_idea_block_info() {
  $blocks = array();
  $blocks['new_idea_open_popup'] = array(
    'info' => t('New Idea - Open modal on load'),
  );
 
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ideal_idea_block_view($delta='') {
  $block = array();
 
  switch($delta) {
    case 'new_idea_open_popup' :
      $block['content'] = ideal_idea_popup_view();
      break;
  }
 
  return $block;
}

/* Display block */
function ideal_idea_popup_view(){
  global $base_url, $user;
  //check if node was just created
  if(!isset($_SESSION['newnode']) || $_SESSION['newnode'] == 0) return '';
  //get the number of points from the rule
  $rule = rules_config_load('rules_user_add_idea');
  $points = '';
  foreach ($rule->actions() as $action) {
    $points = isset($action->settings) && isset($action->settings['points']) ? $action->settings['points'] : $points;
  }

  //get total user points
  $total_points = token_replace('[user:points]', array('user' => $user));

  //get current node share button
  $field_share_html = '';
  if (arg(0) == 'node' && is_numeric(arg(1))) $nodeid = arg(1);
  if(!empty($nodeid)){
    $node = node_load($nodeid);
    $wrapper = entity_metadata_wrapper('node', $node);
    if(isset($wrapper->field_challenge_ref) && !empty($wrapper->field_challenge_ref)){
      $challenge_ref = $wrapper->field_challenge_ref->value();
      if(!empty($challenge_ref)){
        $challenge_node = node_load($challenge_ref->nid);
        $field_share = field_view_value('node', $challenge_node, 'field_share', 'default');
        $field_share_html = '<span class="share-wrap"><div class="share-content">'.render($field_share).'</div><button type="button" class="btn btn-primary share-btn">'.t('Share your idea').'</button></span>';
      }
      
    }
    
  }
  
  //remove session of new idea node
  $_SESSION['newnode'] = 0;
  unset($_SESSION['newnode']);

  //render popup
  $body = '<p>You successfully submitted your idea and earned <b>'.$points.' points</b></p>
          <p class="total-points">You now have total of <b>'.$total_points.' points</b></p>';
  $buttons = '<a class="btn btn-primary go-home" href="'.$base_url.'" role="button">'.t('Go to Homepage').'</a>
  '.$field_share_html;

  $output = ideal_render_popup_markup(t('Well done!'), $body, $buttons);
  
  return $output;
}

/* Print bootstrap modal markup */
function ideal_render_popup_markup($header = '', $body, $buttons = ''){
  drupal_add_js('(function($) { Drupal.behaviors.ideasavepopup = { attach: function(context) {  $("#popup").modal() } } } )(jQuery);', 'inline');
  $output = '
  <div class="modal fade" id="popup" tabindex="-1" role="dialog" aria-labelledby="popupLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>';
  
  if(!empty($header))
    $output.='<h1 class="modal-title" id="popupLabel">'.$header.'</h1>';

  $output.='
        </div>
        <div class="modal-body">
          '.$body.'
        </div>';
  if(!empty($buttons)){
    $output.='
        <div class="modal-footer">
          '.$buttons.'
        </div>';
  }
  $output.='      
      </div>
    </div>
  </div>';
  return $output;
}
?>